Problem Statement:
Our company maintains employee data in two separate tables within our database: "Employees" containing employee IDs and names, and "EmployeeUNI" containing IDs and corresponding unique IDs. However, there is a challenge in presenting this data in a unified and user-friendly format. Specifically, we need a solution to display the unique ID of each employee alongside their name. For employees without a unique ID, the display should show 'null' instead. Presently, there's no streamlined process to achieve this, leading to inefficiencies and potential errors in data interpretation.

Table: Employees

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains the id and the name of an employee in a company.
 

Table: EmployeeUNI

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| unique_id     | int     |
+---------------+---------+
(id, unique_id) is the primary key (combination of columns with unique values) for this table.
Each row of this table contains the id and the corresponding unique id of an employee in the company.
 

Task: Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.
Return the result table in any order.

Solution:

SELECT EmployeeUNI.unique_id, Employees.name
FROM Employees
LEFT JOIN EmployeeUNI
ON Employees.id = EmployeeUNI.id;
